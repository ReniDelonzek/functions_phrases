module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
    
  },
  extends: [
    'airbnb-base',
    'plugin:import/errors',
    'plugin:import/warnings',
    'plugin:import/typescript',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: [
    '@typescript-eslint',
    'jest',
  ],
  rules: {
    indent: 'off',
    'linebreak-style': 0,
    'import/extensions': 'off',
    'max-classes-per-file': 0,
    'no-unused-vars': 'off',
    'class-methods-use-this': 'off',
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/no-empty-interface': 'warn',
    '@typescript-eslint/no-namespace': 'error',
    '@typescript-eslint/prefer-for-of': 'warn',
    '@typescript-eslint/triple-slash-reference': 'error',
    '@typescript-eslint/unified-signatures': 'warn',
    'comma-dangle': 'warn',
    'constructor-super': 'error',
    eqeqeq: ['warn', 'always'],
    'import/no-deprecated': 'warn',
    'import/no-extraneous-dependencies': 'error',
    'import/no-unassigned-import': 'warn',
    'no-cond-assign': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': 'error',
    'no-empty': [
      'error',
      {
        allowEmptyCatch: true,
      },
    ],
    'no-invalid-this': 'error',
    'no-new-wrappers': 'error',
    'no-param-reassign': 'off',
    'import/prefer-default-export': 'off',
    'no-redeclare': 'error',
    'no-sequences': 'error',
    'no-restricted-syntax': 'off',
    'no-await-in-loop': 'off',
    'prefer-destructuring': 'off',
    'no-underscore-dangle': 'off',
    'no-shadow': [
      'error',
      {
        hoist: 'all',
      },
    ],
    'no-throw-literal': 'error',
    'no-unsafe-finally': 'error',
    'no-unused-labels': 'error',
    'no-var': 'warn',
    'no-void': 'error',
    'prefer-const': 'warn',
    'max-len': 'off',
    /* Deixa permitir console.log */
    'no-console': 'off',
    /* Acusa se algum parametro ou funcao usada por uma classe|funcao, for definido depois da utiliazacao */
    'no-use-before-define': 'off',
    // Habilitar depois de separar todas as funcoes em arquivos, este acusa erro caso o arquivo A importe algo do B,
    // e o arquivo B importe algo de A, isso causaria lentidao
    'import/no-cycle': 'off',
    'lines-between-class-members': [
      'error',
      'always',
      { exceptAfterSingleLine: true },
    ],
    'no-else-return': ['error', { allowElseIf: false }],
  },
};